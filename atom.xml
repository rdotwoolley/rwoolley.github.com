<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[rdotwoolley]]></title>
  <link href="http://rwoolley.github.com/atom.xml" rel="self"/>
  <link href="http://rwoolley.github.com/"/>
  <updated>2013-10-31T20:09:19-06:00</updated>
  <id>http://rwoolley.github.com/</id>
  <author>
    <name><![CDATA[Robert Woolley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Failure Hurts]]></title>
    <link href="http://rwoolley.github.com/blog/2013/10/31/not-minding/"/>
    <updated>2013-10-31T21:31:00-06:00</updated>
    <id>http://rwoolley.github.com/blog/2013/10/31/not-minding</id>
    <content type="html"><![CDATA[<p><img src="https://s3.amazonaws.com/rdot-personal/blog/notMinding.jpg" alt="The trick is not minding that it hurts" /></p>

<blockquote><p>The trick, William Potter, is not minding that it hurts.</p><footer><strong>T.E. Lawrence and David8</strong> <cite>Lawrence of Arabia and Prometheus</cite></footer></blockquote>


<p>As the Internet, technology and consumers collide we often hear, &#8216;What are you going to do to ensure this <em>never happens again.</em>&#8217; For awhile, this really bothered me and it was simple to get me from my zenlike calm to ultra rage with that sentence. While I am sure we all endevaour for failure to not occur, it does. Thermodynamics tell us that closed systems alway seek a state of maximum entropy and so it goes in Web Operations.  This is why our entire existence is formed around MTTR.  One day, in my state of annoyance with my inability to project certainty, I came across this tweet from Mark Burgess:</p>

<blockquote><p>The trick is to create meaning from failure.</p><footer><strong>@markburgess_osl</strong> <cite><a href='https://twitter.com/markburgess_osl/status/272680024912560128'>twitter.com/markburgess_osl/&hellip;</a></cite></footer></blockquote>


<p>I was missing the point. All along, I thought there was nothing meaningful in failure (and no one needs nothing) but as it turns out, there is a great deal of meaning if you can get past the hurt.  Here&#8217;s the pattern I employ:</p>

<h3>Assumptions</h3>

<ol>
<li>There is some type of metrics collection in use so you can measure response to inputs</li>
<li>There is a willingness to employ a continuous improvement loop</li>
</ol>


<h3>The &#8216;Lawrence of Arabia&#8217; Pattern</h3>

<h4>blameless post mortem</h4>

<p>You need to understand what happened and why it hurts.  It&#8217;s not enough to say the internet is hard and move on. As much as possible, quantify your pain.  Can you reduce an outage to dollars per minute?  Can you measure the impact on your brand reputation?  To get meaing from failure you simply must know what impact the failure has.  Here are some examples of how to enact the blameless postmrotem:</p>

<ul>
<li><a href="http://codeascraft.com/2012/05/22/blameless-postmortems/">Etsy&#8217;s Postmortem Culture</a></li>
<li><a href="http://aphyr.com/posts/288-the-network-is-reliable">Beatiful Collection of Postmortems from Aphyr</a></li>
</ul>


<h4>one human correction</h4>

<p>Once you have a bead on the pain the next step is to enact your continuous improvement loop.  With my team we always set the intention that we will make (at least) one human behaviour based improvement in the wake of an outage event.  We don&#8217;t mind that it hurt. We do want to make sure that the pain we feel next time is new and different.  Some exercises we enact to identify that human based improvement:</p>

<ul>
<li>What business assumptions have changed?</li>
<li>What technology assumptions have changed?</li>
<li>What could we do to make it easier to do the right thing?</li>
</ul>


<h5>example</h5>

<p>Once upon a time we suffered pain from hysterical stop the world GC events.  The human improvement was to find a way to post to a dashboard when these hysterical GCs were occuring so that, as the operator, we could quickly see that it was a GC loop and act accordingly.  A little graphite and a small daemon go a long way to minimizing MTTR.</p>

<h4>one technology correction</h4>

<p>Everything changes and changes fast.  What assumptions have you made about your technology collection in your complex system?  Are the queues queuing well? Is the JVM tuned for the way people use your system?  Can you do anything to catch this and make the feedback loop shorter?  I encourage the introspection so that one improvement is made on the technology side.</p>

<h5>example</h5>

<p>Let&#8217;s stay on the GC example for fun.  After torpedoing the heap the obvious tuning paramter is to merely add more.  Indeed, that was our first approach to buy some time. Our introspection kicked in and we realized that our user base had grown and their habits had evolved.  We then decided to look at a different JVM that would match more closely to how people used our software.</p>

<h4>conclusion</h4>

<p>If you were to take one thing away from this pattern I hope that it is the inspiration to find meaning in failure.  Like Lawrence of Arabia, there is beauty in the desert of failure and it you can withstand the pain it&#8217;s a wonderful way to improve what you do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jeet Kune DevOps]]></title>
    <link href="http://rwoolley.github.com/blog/2012/12/09/jeet-kune-devops/"/>
    <updated>2012-12-09T21:04:00-07:00</updated>
    <id>http://rwoolley.github.com/blog/2012/12/09/jeet-kune-devops</id>
    <content type="html"><![CDATA[<p>When I am trying to build a bridge between Dev, Ops, QA, and a business unit I find that I reference Bruce Lee a great deal.  Not only was Bruce Lee a superb actor and amazing martial artist he was a great philopsher.  Click through to read about Jeet Kune DevOps!</p>

<!-- more -->


<blockquote><p>&#8220;Use only that which works, and take it from any place you can find it.&#8221;<br/>
[As quoted in Bruce Lee : Fighting Spirit (1994) by Bruce Thomas (1994), p.44]</p></blockquote>

<p>There is a consistent effort to label or define DevOps. This is a worthwhile and important effort.  Defining  a consistent vocabulary allows the flow of communication between different groups more readily.  This aids sharing, the ability to measure, common culture elements etc.  What we do is global and our communication capability has to reflect that.</p>

<p>Let me step back for a moment.  I am student of agile and I have worked in agile environments for many years.  I believe the agile movement made a subtle mistake in that there was (and is) too much effort spent defining the various methodologies and, for lack of a better term, enforcing those methodologies.  Teams that adopted these methodologies pragmatically and adapted them to their business won.  Those that tried to cling strictly to Scrum, XP or Kanban etc, found themselves constantly in a struggle to implement those methodologies instead of making things work.  The number of times I heard the sentence, &#8220;We can&#8217;t do that it&#8217;s not scrum/agile/XP&#8221; from various teams is too high.  Note, I was a willing perpetrator in this behaviour and this antipattern isn&#8217;t limited to tech (uhhh, project management?).  Thing is, I do not want to make the same mistake twice.</p>

<p>At times I think the DevOps movement teeters on a making a similar misstep.  By pursuing too narrow of a definition for DevOps we could lose momentum.  A common mode of communication is necessary but it lacks credibility and solidarity if we tear each other to bits over the perceived implementation of a flawed process, tool, or system.  We have some examples of this in our young past, (NoOps anyone?) and what is the point of wasting energy on that type of discourse?</p>

<p>@jordansissel really helped shape my early perspectives on DevOps when I heard one of his first interviews.  When he was asked about Devops he said (paraphrasing here) &#8220;I guess you can call that devops, I don&#8217;t.  I call it doing the right thing&#8221;.  Isn&#8217;t that what we&#8217;re all after?  Our common mode should be based on sharing, measurement, culture, tools and doing the right thing. Wait, does that sound familiar?  It should because <a href="http://itrevolution.com/devops-culture-part-1/">I STOLE IT from Damon Edwards and John Willis</a>.  Or I took it, adapted it and added to it.  So, what am I getting at?  Simple, I ask the DevOps moment to do one thing: Use what works, take it from anywhere, share what you have learned and, above all else, keep doing what is right.</p>

<p><img src="https://s3.amazonaws.com/rdot-personal/blog/Absorb-what-is-useful-Discard-what-is-not-Add-what-is-uniquely-your-own-quote-by-Bruce-Lee.jpeg" alt="BruceLee" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cooperation]]></title>
    <link href="http://rwoolley.github.com/blog/2012/10/28/cooperation-v1/"/>
    <updated>2012-10-28T16:22:00-06:00</updated>
    <id>http://rwoolley.github.com/blog/2012/10/28/cooperation-v1</id>
    <content type="html"><![CDATA[<p>Welcome to my first post in the series regarding people and how they are the most important part of the system. I have decided to tackle cooperation so here are my thoughts (and thoughts from others) on how cooperation trumps competition.  Be warned, this is a lengthy topic and this is only my initial essay on the matter.  Expect more. Much more. As ever, click on for a good read.</p>

<h2>Why are you reading this?</h2>

<p><img src="http://cloud-2.steampowered.com/ugc/541804448690540485/0E95C956284E83140D6497E220025BCF28120990/200x200.resizedimage" title="Why" alt="why?" /><br/>
Chances are that you:</p>

<ul>
<li>Keep a corner of the Internet running or some critical piece of information technology operating inspite of itself</li>
<li>You walk a fine line between innovation and stability</li>
<li>You might have this restless feeling that things can be done better</li>
</ul>


<p>If so, welcome to the club.  Before we begin to get incredibly deep into the details here are a few things that won&#8217;t be happening in this post:</p>

<ul>
<li>There will be no defining of DevOps.  There are people way better than me figuring that out</li>
<li>There will be less focus on tools, again, way better people out there for that</li>
<li>This will be focused on soft things like people, feelings, culture, behaviour hacks and how we focus on doing things better</li>
</ul>


<p>My goal with the post is to leave you with the feeling that cooperation, on different levels, is better for us, all of us, than competition.  I&#8217;d also like to posit some behaviour hacks that might aid in the transition to cooperation.  Lastly, at the end of this post you should be left considering where competition is present in your team/organization and it if is worthwhile or not.</p>

<h2>What&#8217;s Wrong?</h2>

<p>Lately, some of the DevOps heavy hitters (@botchagalupe, @therealgenekim) have been discussing the teachings and achievements of a scholar by the name of Deming.  He puts in best:</p>

<blockquote><p>&#8220;the present style of management is a modern invention and represents &#8220;a prison created by the way in which people interact.&#8221; The present system includes competition between people, teams, departments, divisions, students, schools and universities. Although economists have taught that competition will solve our problems, we now know that competition is destructive. A better approach is for everyone to work together as a system. The solution to problems comes from cooperation, not competition.&#8221;  <br/>
<a href="http://www.maaw.info/ArticleSummaries/ArtSumDeming93.htm" title="The New Economics for Industry, Government &amp; Education">-Deming, W. E. 1993. The New Economics For Industry, Government &amp; Education. Cambridge: Massachusetts Institute of Technology Center for Advanced Engineering Study.</a></p></blockquote>

<p>I could not put it better myself!  So, I have no desire to live out my career in a veritable prison so let us shift gears to talk about cooperation in greater detail.</p>

<h2>Cooperation Interesting Facts</h2>

<p>Some of the information I am about to share with you came from a wonderful documenatary titled <em>&#8220;I am&#8221;</em> directed by Tom Shadyac.  It is worth a watch so check it out <a href="http://iamthedoc.com/">here</a> or <a href="https://itunes.apple.com/ca/movie/i-am/id477447848">here</a>.</p>

<p>Biology is a wonderful science to draw from when looking to understand cooperation.  Here, as introduced by the documentary <em>I am</em>, the tale of &#8216;group based consensus decision making&#8217; is demonstrated wonderfully by a herd of Red Deer.  When a herd is in the meadow eating it is faced with a difficult choice about <em>when</em> the herd should move towards the watering hole to hydrate.  Go too soon, and some herd members will be under nourished.  Go too late and some herd members will be dehydrated.  In either instance, the herd as a whole will be compromised in it&#8217;s ability to adapt to threats.  So how do the deer solve this problem?  The answer, it turns out, is democracy.  In nature it is not the alpha deer that decides when the herd will move, it is the majority.  Simply put, once the majority of the deer are looking up from the grass and in the direction of the watering hole that is the signal for the collective to move onto the watering hole.  Again, I&#8217;m an engineer so don&#8217;t take my word for it.  Read up on it for yourself: <a href="http://www.wildmovement.com/the-51st-deer-cooperation-vs-competition">Red Deer</a>. Some would call this emergent behaviour, others democracy, but the animals call it staying alive.  Funny that…</p>

<p>Now before you rail that I am a pinko commie bastard and point out that capitalism is the best invention since sliced bread bear with me here.  I know that deer are prey animals and humans are predators and it would be reasonable to suggest that prey based decision economics differ from predator based decision economics. If you think humans are not predators take look at the spacing of a humans eyes to those of a deer (binocular vs monocular).  Humans have depth perception where deer do not.  Conversely, deer have an exceedingly large field of view compared to humans.  Focus and depth perception are predatory traits and humans need to be able to pounce, judge distances, throw things and generally kill other animals as part of our diet to survive we are most certainly predators.  Deer need to be able to see said humans and run away.  There is no doubt about it, humans are the apex predator of the planet inspite of there being many other predators that are superior to us in many ways.  See below for an example.</p>

<p><img src="https://s3.amazonaws.com/rdot-personal/blog/cooperation/t-rex.png" title="T-Rex" alt="alt text" /></p>

<p>On any given day, I am going to say that T-Rex wins this encounter.  I saw Jurassic Park and I fear only two things: Tyrannosaurus Rex and Aliens of the James Cameron/Ridley Scott variety.  Ergo, I consider myself an expert in all things T-Rex-ish and extremely grateful for the fact that humans can cooperate.  Why? Because with the help of my friends and some technology, I feel confident that we could handle a T-Rex. Please see below:</p>

<p><img src="https://s3.amazonaws.com/rdot-personal/blog/cooperation/Trexchainsaw.jpg" title="T-Rex" alt="alt text" /></p>

<p>Therein is my subtle point.  Even predators, who have competitive tendencies, excel at cooperation.  Orcas in pods, hyenas, wolves, and honey badgers in packs, crows in murders, owls in parliments and yes, T-Rexes in gangs. So face it human being, you are wired to cooperate even though you are a savage predator! In fact, there is plenty of evidence that working cooperatively in groups towards a goal makes humans feel good.  Conversely, a group of humans being coerced to do something makes them feel like crap.  Don&#8217;t believe me? I&#8217;ll find someone to micromanage you for a week.</p>

<p>The DevOps landscape is littered with wonderful examples of teams working together well.  @Allspaw&#8217;s beer test is a wonderful measure of a team working together.  Still, all these examples of working well in a crisis are fine-n-dandy and well described but no one is talking about the normal day and how you get a group focused on a singular purpose.  Because, let&#8217;s face it, nothing gets done without cooperation or coercion (which is merely forced cooperation).</p>

<p>Cooperation is hard and poorly understood by many of us in management.  I suggest to you that there are 4 levels at which cooperation needs to be nourished for a person/team/organization/society to flourish.  The challenge is that as you empower cooperation through the levels there is a cooresponding difficulty increases that is exponentially related.  At the start you have the cooperation between people, then on a team, then groups of teams, then between organziations.  The difficulty is represented in the truly scientific diagram below.</p>

<p><img src="https://s3.amazonaws.com/rdot-personal/blog/cooperation/AsymptoteDifficulty.png" alt="alt text" /></p>

<p>Remember, you are here because you do not scare easily and you have a strong sense of perservereance.  Of course you do!  You&#8217;re still reading. Fear not, dear reader, there are ways to help cooperation become a staple in the existence of your team, teams, and organizations inspite of the convincingly displayed challenges.</p>

<h2>Cooperation at Level 1</h2>

<p>Cooperation at the very base is two people working together.  That is all.  This can also be the hardest cooperation to achieve. The best way to get two people working together is to give them a common goal, a purpose, a why, a reason to combine their talents and produce something from their joint effort.  Let us look at an example:</p>

<p><img src="https://s3.amazonaws.com/rdot-personal/blog/cooperation/Frozen-pool-cannonball-dive.gif" alt="alt text" /></p>

<p>This is a rather entertaining example yet it illustrates the point that is crucial: two people: one goal.  In this case the goal was to make an amazing video about the ever challenging topic of &#8216;poor life choices&#8217;.  I think we can all agree, mission accomplished.</p>

<p>In conclusion, to foster cooperation at level 1 the behaviour hack is simple to state, harder to achieve: <em>Provide a Common Goal</em></p>

<h2>Cooperation at Level 2</h2>

<p>Level 2 focuses on fostering cooperation with a team.  Essentially we&#8217;re looking at groups larger than 2 and constrained by a single functional business unit and a single upline report. There are several crucial ideas to build cooperation within a team:</p>

<ul>
<li>Remove Hierarchy and Ranking <a href="Link">^1</a><br/>
Ranking and pecking orders are horrible practices that directly promote competition.  A wonder example of this terrible practice is Microsoft.  Read about it <a href="http://www.vanityfair.com/online/daily/2012/07/microsoft-downfall-emails-steve-ballmer.print">here</a>. Instead, set your team up as a system and understand how it fits into the overall system that is your business.  Judge the output of the team as it relates to the system and tune it from there.</li>
<li>Decentralize Decision Making <a href="Link">^2</a><br/>
I suggest that if a team knows why it exists, has been empowered and has strong communication it will not need to seek approval to do the right things for the business.  This transformation is facilitated by the manager of the team.</li>
<li>Leadership instead of Management <a href="Link">^3</a><br/>
Management should be focused on the system of the business and less on turf and visibility.  Leadership emerges when ego is surrendered and in its place is a you find a strong listener with the ability to manage and understand the interdependencies between people, team, business units, and customers.</li>
</ul>


<p>So where would we look for a shining example of cooperation for level 2?  Well you could always call the A-Team but why don&#8217;t we look at Bradley Wiggins&#8217; Tour de France team for 2012?  Team Sky built the team it fielded for the 2012 tour well in advance gave them a clear single purpose.</p>

<blockquote><p>&#8221; It was programmed from last year (2011) to win the Tour in July. They started working on this project more than a year before the Tour started. They got everyone on board on the team to make sure the riders were in the best shape, with the best material, the best coaching and training. They left nothing to chance.&#8221; <a href="http://velonews.competitor.com/2012/11/news/bernhard-eisel-speaks-about-athletes-panel-sky-shakeups-and-cycling-post-armstrong_266083">Bernhard Eisel, Rider for Team Sky</a></p></blockquote>

<p>Communication was clear, everything for Brad and the results are <a href="http://www.guardian.co.uk/sport/blog/2012/jul/20/tour-de-france-2012-team-sky">impressive</a>.</p>

<p>The behaviour hack for team based cooperation is simple to discuss but challenging to implement:  Transparent Communication.</p>

<h2>Cooperation at Level 3</h2>

<p>Cooperation between teams! Is this not the heart of the DevOps matter? Honestly, I cannot think of a concept that is more obvious and yet hardly present in the construct of North American business.  Here are some of the crucial ideas to empower different teams to cooperate with each other.</p>

<ul>
<li>Destroy any and all inter-team competition:<br/>
<img src="https://s3.amazonaws.com/rdot-personal/blog/cooperation/ackbar.gif" alt="ackbar" /><br/>
When teams within a business compete it destroys any hope of building quality into the organization.  A sales team will throw crappy leads at an account management team to drive numbers and look good and leave the account managers holding the bag.  Dev will throw code over the wall to QA that is garbage.  Ops will be obstructionist if they are optimized for stability and not change.</li>
<li>The business is a system!  Articulate how each team is connected, it is never &#8216;us versus them&#8217; as the output from one team is the input for another.</li>
<li>Elimination of Fear<br/>
Just Culture advocates provide the strongest case for the elimination of fear within a business.  I reccomend Sidney Dekker&#8217;s work or just start <a href="http://www.justculture.org/">here</a> to start on a journey that will transform your business.</li>
</ul>


<p>Inter-team cooperation is a huge and career defining journey.  An interesting example of a business that is thriving with this type of a model is github.  Check it out <a href="http://zachholman.com/posts/how-github-works/">here</a>.  Keep in mind that what Github terms as anarchy is just the application of zero hierarchy and true democracy.</p>

<p>In the previous sections I have left you with a behaviour hack that might perpetuate the concept we have discussed.  For inter-team cooperation the most important behaviour hack is <em>Executive Air Cover</em>.  There is no way to be successful in transforming teams to work together without strong sponsorship from the top.</p>

<h2>Cooperation at Level 4</h2>

<p>If getting people, teams, groups of teams cooperating is not enough of a challenge for you then how about getting separate organizations cooperating? Welcome to cooperation level 4; ladies and gentlemen strap in because this is nearly impossible with business as we know it today.  Well, almost impossible.  Here the DevOps movement has been bucking this trend quite well.</p>

<p>Velocity, DevOpsDays, and all the individual meetups that take place all over the globe are the only example I need to present on inter-organization cooperation. Yet, there are so many more: Netflix open sourcing the Simian army, Etsy and StatsD/Deployinator, Ruby on Rails …</p>

<p>The example I&#8217;d like to leave you all with for inter-organizational cooperation is this: <a href="http://codeascraft.etsy.com/2012/09/10/the-engineer-exchange-program/">The Etsy-Twitter engineering exchange program.</a>  Here we have two completely separate organiztaions exchanging techincal talent so they can learn from each other.  That&#8217;s amazeballs.  I don&#8217;t purport to have a clue on how to encourage that kind of behaviour other than sharing this example with you and hopefully encouraging my organization to do something similar.</p>

<h2>Conclusion</h2>

<p>My goal was to present supporting evidence that cooperation is a behaviour that returns more value than competition.  I hope I have achieved that goal and entertained you in the process.  If I could leave you with one thought it would be this: Operational teams have a wonderful opportunity to transform the way things are done in all industries so long as we consider people in addition to technology.  People are the most important part of the system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ops and a New Series of Posts]]></title>
    <link href="http://rwoolley.github.com/blog/2012/08/01/ops-and-a-new-series-of-posts/"/>
    <updated>2012-08-01T19:46:00-06:00</updated>
    <id>http://rwoolley.github.com/blog/2012/08/01/ops-and-a-new-series-of-posts</id>
    <content type="html"><![CDATA[<p>In proper Ops fashion I have finally setup comments and analytics on the blog! I&#8217;m measuring everything so it should be entertaining.  Comments should be entertaining. I&#8217;m not interested moderataing so be warned and review this <a href="http://popblerd.com/wp-content/uploads/2011/10/dickwad-theory.jpg">handy chart.</a>  In other news I wanted to cover three things with this post: what is Ops to me, the DevOps Calgary meetup, and a new series of posts about position on people in systems.  As ever, click through if interested.</p>

<!-- more -->


<h3>What is Ops? Baby don&#8217;t hurt me, no more</h3>

<p>I have been a part of teams that do Ops work my entire career.  The kind of people drawn to Ops are a speical breed blending tenacity, fearlessness, and an ability to suffer.  Still, I struggle to define what Ops is.  This tweet has helped me:</p>

<blockquote><p>Ops: a problem everyone wishes someone else would solve.</p><footer><strong>@fogus</strong> <cite><a href='https://twitter.com/fogus/statuses/126439059622072320'>twitter.com/fogus/statuses/&hellip;</a></cite></footer></blockquote>


<p>While it is dangerous to define things this way (ex: defining trust as the pre-existing condition for betrayal) it&#8217;s oddly fitting.  Ops teams exist because they must, because some people will do the things that need to be done regardless of stature and because some people just love making sure things are working.  Ops is the team that likes to make things go and go better, they like making sure the other teams are rolling and they are powerful forces for positive culture contributing positive energy in their roles.  This is amplified when they find themselves in cross functional roles.</p>

<p>Of course, I speak of the idealized case.  But isn&#8217;t that what we all strive for?</p>

<h3>DevOps Calgary Meetup</h3>

<p>We had our first meetup last week and it was a nice start to get things rolling again.  The group was energetic and full of great ideas.  I&#8217;m looking forward to the potential and if you&#8217;re interested <a href="http://www.meetup.com/CalgaryDevOps/">check it out</a></p>

<h3>People are the System</h3>

<p>I&#8217;m working on a series, my first ever, of posts that have a common theme: people.  I have a strong set of theories about systems and the people that design, implement, run and maintain them.  I feel that we often undervalue the role of people and I seek to draw attention to this and offer my suggestions and experience in tuning the most critical part of any system: the people.  Watch for it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why My Team Exists*]]></title>
    <link href="http://rwoolley.github.com/blog/2012/07/25/why-my-team-exists/"/>
    <updated>2012-07-25T19:01:00-06:00</updated>
    <id>http://rwoolley.github.com/blog/2012/07/25/why-my-team-exists</id>
    <content type="html"><![CDATA[<p>*This is a posthumous post that I meant to get out before my tenure ended with my former team.  Still, it&#8217;s an important post because it highlights some of the extremely powerful elements of culture that a strong team can harness and share.  As ever, click through if you&#8217;re interested.</p>

<!-- more -->


<p>Why.  As <a href="http://www.ted.com/talks/view/lang/en//id/848">Simon Sinek</a> would say, it is <em>the question</em>. Unfortunately it is a question that many organizations struggle with. I don&#8217;t think the struggle is bad it&#8217;s more when the struggle stops. Here&#8217;s how my team and I approached that cultural challenge.</p>

<p>After attending Barcamp I was inspired by Tara Kelly and I decided to put a challenge to the team. On the Monday following Barcamp I posed the question to the team during standup, &#8220;Why Does the Ops team Exist?&#8221;  Over the next few weeks the team debated (largely without my input) and completely blew my mind with the result.  Not only did they create a great why, they presented it and posted it above our Kanban board for all to see.  Check it out below:</p>

<p><img src="https://s3.amazonaws.com/rdot-personal/blog/WhyOps.png" title="Why Ops Exists at CSI" alt="picture alt" /></p>

<p>Here&#8217;s some of the reasons why the CSI Ops team totally rocks:</p>

<ul>
<li>They formatted the text as Ruby to match our internal goal to move all our scripts to Ruby</li>
<li>The &#8216;Why&#8217; reflects how a good ops team services internal and external customers and does so fearlessly</li>
<li>The message has subtle elements that I think are crucial to an Ops team building positive culture. Note the words: &#8216;Empower, practices, postive, technology&#8217;</li>
<li>Whenever the team has a question or a dilemma they can always chart a course of action that is based from our reason for being. If your actions or response will lead to a positve and empowering customer experience based on your skills and/or the use of technology <em>rip it!</em></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update and a Fresh Start]]></title>
    <link href="http://rwoolley.github.com/blog/2012/07/22/update-and-a-fresh-start/"/>
    <updated>2012-07-22T15:18:00-06:00</updated>
    <id>http://rwoolley.github.com/blog/2012/07/22/update-and-a-fresh-start</id>
    <content type="html"><![CDATA[<p>I have been horrible on posting regularly. There&#8217;s never a good excuse so I&#8217;ll skip that part and move into the updates!</p>

<!-- more -->


<h2>Update</h2>

<p>I am sad to mention that I have left my work home of the past 4 years (Calgary Scientific).  There are many great people, a neat product, and (of course) my team that I bid farewell.  It was not an easy decision but the experience I gained was incalculable.  I have a huge backlog of blog posts to share about what we got up over the past few years.</p>

<h4><em>note</em>: The Team aka My Team</h4>

<p>I understand that it can be percieved as arrogant to refer to the people you manage the way that I do.  My perspective does not come from a place of ego when I say &#8216;my team&#8217;.  At CSI the team I built (yes, I recruited each of them) and lead (I was priviledged to set objectives and direction) will always be very special to me and I learned so much from them that I am very eager to share it.  I am extremely proud of that group and what they have done and will continue to do.  So when I say &#8216;my team&#8217; I&#8217;m refering to a collection of people that I would work with in any capacity again in an instant.  This theme will come up repeatedly so heads up.</p>

<h2>Fresh Start</h2>

<p>I am happy to say that I have joined <a href="http://solium.com">Solium Capital Inc</a> as their first DevOps engineer.  It&#8217;s going to be very exciting to bring my culture, automation, measurement and information sharing perspectives to their teams.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Barcamp]]></title>
    <link href="http://rwoolley.github.com/blog/2012/05/05/barcamp/"/>
    <updated>2012-05-05T19:35:00-06:00</updated>
    <id>http://rwoolley.github.com/blog/2012/05/05/barcamp</id>
    <content type="html"><![CDATA[<p>Barcamp was hosted by Startup Calgary today and it was awesome.  Many great talks, chats, and people.  I want to cover some of the high points and with such a jam packed day this post will be a touch longer.  Below is the summary and read on if you can handle the awesome.</p>

<ul>
<li>Opening speakers</li>
<li>Mobile development Awesomeness (@johncarpenter)</li>
<li>Get Cash Money for your LBS startup! (@arpadb)</li>
<li>Pair Programming (@mmazur)</li>
<li>Government Money for R&amp;D (@tktechnow and @boastcapital )</li>
<li>Brand Pyramid (@tktechnow)</li>
</ul>


<!--more-->


<h4>Opening Speakers</h4>

<p>Ray Depaul, Tara Kelly, and Shawn Abbott kicked off the day with some high energy and rapid fire speeches to get the attendees wired for the day.  Here were some of the highlights for me:</p>

<h6>Ray Depaul</h6>

<p>Ray hails from RIM (back when they were cool) and now is teaching new waves of entrepreneurs at MRC.  He spoke to us about the <a href="http://www.kickstarter.com/projects/597507018/pebble-e-paper-watch-for-iphone-and-android">Pebble Watch</a> and how disruptive techonolgies require disruptive channels for funding and delivery.</p>

<h6>Tara Kelly</h6>

<p>Tara is an extremely engaging and energetic speaker.  <a href="www.splicesoftware.com">Splice</a> is her gig and she shared three awesome pieces of wisdom:</p>

<ul>
<li>Know your numbers!  All of them.</li>
<li>As you grow make sure your role allows you to stay juiced.</li>
<li>Have your brand pyramid figured out.  If you don&#8217;t punch yourself in the face.</li>
</ul>


<h6>Shawn Abbott</h6>

<p>Shawn Abbott is a big deal and acts as a mentor and guide to many in the YYC startup community.  He shared 5 great points:</p>

<ul>
<li>Entrepreneurship is a team sport and teams with checked egos and strong chemsitry are more likely to succeed.</li>
<li>Pull not push.</li>
<li>Be Agile, know when to fish and when to cut bait.</li>
<li>Nail it before you scale it.</li>
<li>The business savvy is as important as the tech savvy.</li>
</ul>


<h4>Sessions</h4>

<p>I attended 5 sessions (there were 6 in total) and I wish I had been able to stick around.  I&#8217;ll cover the high points from each session from my perspective.</p>

<h6>Mobile Development Awesomeness with John Carpenter</h6>

<p><a href="http://twitter.com/johncarpenter">@johncarpenter</a> put on a great session. He&#8217;s got a great ability to respond to the group in the non-conference style.  I believe John is focused on mobile gaming but his thoughts apply to all aspects of mobile development IMHO.  If you&#8217;re in Calgary you should check out his <a href="http://startupcalgary.ca/2012/03/introducing-startup-calgarys-mobile-monday/">Mobile Monday</a> meetups.  Full disclosure: I&#8217;m not a developer but I&#8217;m interested. Here&#8217;s what I took from his session:</p>

<ul>
<li>Minimum Viable Product: get there ASAP. (so glad I read lean startup before attending).</li>
<li>Your process need only be Build - Measure - Learn.  Do this as fast as possible.</li>
<li>Bring customers into your cycle ASAP.</li>
<li>Building the App is easy, pushing the app is hard.</li>
<li>Mobile is about experience, not widgets. How does your product help the mobile phone users pass the time?</li>
<li>All areas of the business, Sales, Dev, Ops, QA etc should be on the same Build - Measure - Learn cycle.  If not, it messes thing up.  You&#8217;re only as fast as your slowest team.</li>
<li>Know your community! Otherwise you cannot know your metrics and you cannot measure or learn.  He shared a great anecdote about the Trapster app, ask him about it sometime.</li>
<li>Application Feedback: John mentioned &#8216;Net Promoter Scores&#8217; as a valuable approach.</li>
<li>Flurry is a great tool for in app metrics.</li>
<li>Test Flight allows split testing easily.</li>
</ul>


<h6>How to Raise 500K for your LBS Startup</h6>

<p>This session was run by Arpad Barabas <a href="http://www.twitter.com/arpadb">@arpadb</a> and was focused on getting some sweet funding for innovation based on geomatics work.  Arpad is awesome, he&#8217;s super calm and engaging with this quiet intensity that powers a crowd.  Not to mention he&#8217;s a snappy dresser!  He&#8217;s a part of Startup Calgary and is integral to <a href="http://aboveborder.com/">Above Border</a> and was a key guy at <a href="http://www.tecterra.com/">Tecterra</a> so a great deal of his advice is exceptional.</p>

<ul>
<li>Know your customer acquisition costs! How much does it cost you to get that first customer? How much do you make from that customer?</li>
<li>If you want to approach tecterra for funding, you can reach out to Arpad for advice.</li>
<li>If there is any mapping or location based service element in your product or project, check out tecterra.</li>
<li>Tecterra funding is wildly friendly, non-diluting, sweet repayment terms and several programs that are very useful.</li>
</ul>


<h6>Pair Programming</h6>

<p>Pair programming was hosted by Mike Mazur <a href="http://twitter.com/mmazur">@mmazur</a> who&#8217;s currently based in Singapore and working for New Context (Formerly Pivotal Labs&#8217; Singapore office) and back in town for a visit.  Mike and I went through engineering together so it was great to see him and attend his presentation.  Here&#8217;s my thoughts on his session:<br/>
* Pairing has positives for learning and sharing information within teams
* Pairing can increase quality
* Pairing does not cost the organization more! Because there are less mistakes and more shared context development can move faster.
* Pair on everything! Ops, Dev, QA, UI etc.
* For pairing to work, conistent tooling is required.  No custom key bindings, you all use the same tools.
* Typing speed is not the rate limiting factor of a dev team using pair programming.
* Pairing requires a few things of people: focus, respect of personal space, good communication, and an open mind.  If you don&#8217;t have those things, you&#8217;re toast.
* The concept of &#8216;the truck number&#8217; came up.  This is the number of people that would have to be killed by a truck for your organization to come to a halt.  Pairing will help dramatically increase this number.</p>

<h6>Government Funding for R&amp;D</h6>

<p>This session was jointly hosted by Tara Kelly and <a href="https://twitter.com/#!/boastcapital">Alex Popa</a>.  Alex was the main contributor to the conversation and he&#8217;s awesome.  Having been the lucky survivor of numerous ISO and FDA audits I would love to see Alex in action. He&#8217;s insanely calm with smooth dulcet tones that would likely calm any auditor or reassessment team.  His cool confidence was fun to be around especially when Ivan Sierralta from Innovate Calgary started contributing to the session. Ivan is super energetic and hilarious so the contrast was fun.  Here&#8217;s my main take aways:</p>

<ul>
<li>SRED is the most lucrative program to take advantage of.  As long as you can run for a year and meet the technology requirements (must use technology, must have some uncertainty, and must demonstrate advancement) it&#8217;s worth the accounting pain.  That being said, talk to a SRED consultant (like Alex) and they can give you some good ideas.</li>
<li>IRAP seemed to be more lucrative and popular (especially with Ivan) because the funding can be upfront and is generally easier to secure.  Main thing here is to get into the queue for this funding and stick with it. Once you get it the first time it becomes easier.</li>
<li>Tara suggested that you must write your own grants so that your voice is present in the document.  Failure to do this will hurt your chances.</li>
<li>Alberta Innovates Tech Futures is another great source of funding as well.</li>
<li>Lastly, a great idea came out of the session: a timeline based infographic that points out which funding you should go after and when during the life of your company.  The main example here is CIP funding is only good for your first customer.  Got a customer already? Don&#8217;t waste your time with CIP.</li>
</ul>


<h6>Brand Pyramid</h6>

<p>The best session for me was the brand pyramid with <a href="http://twitter.com/tktechnow">Tara Kelly</a> who&#8217;s the President and CEO of <a href="http://splicewsoftware.com">Splice</a> and a truly awesome person to hear talk.  Her energy and passion are contagious and her presentation style resonates with me (and those of you that know me know what that means).  Holy shit, I learned so much about the things I struggle with daily that I got a headache.  So, strap in people, this is getting real:</p>

<ul>
<li>Your business should answer this question: What 5 things do you want your customers to say about your organization?</li>
<li>Who are you currently selling to?  Who do you want to be selling to?</li>
<li>Your personal brand does NOT equal the organizations&#8217; brand.  They compliment each other!</li>
<li>The TED talk by <a href="http://www.youtube.com/watch?v=u4ZoJKF_VuA">Simon Sidek</a> was mentioned.</li>
<li>Knowing the Why, the What and the How allows you to avoid bad money, align your people and empower your people to make good decisions without heavy oversight. (Note: if you have decision bottlenecks in your org I bet you a fancy dinner it&#8217;s directly related to a crappy brand pyramid)</li>
<li>Who would your organization sponsor if they could sponsor any team, any sport, anything?</li>
<li>Use your head, trust your heard, follow your gut.</li>
</ul>


<p>I cannot stress enough how these elements define the culture of your team and organization.  They are the fundamental base of all things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Flavour of Lifesaver: FPM]]></title>
    <link href="http://rwoolley.github.com/blog/2012/03/26/new-flavour-of-lifesaver-fpm/"/>
    <updated>2012-03-26T20:31:00-06:00</updated>
    <id>http://rwoolley.github.com/blog/2012/03/26/new-flavour-of-lifesaver-fpm</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been hunting for a good reason to get familiar with @jordansissel&#8217;s wonderful tool <a href="https://github.com/jordansissel/fpm">FPM</a>. I have spent more time grovelling with rpm spec files than I ever wanted to but I haven&#8217;t been able to break out of the habit. Until today that is&#8230;</p>

<p>My problem is simple, despite setting up a sweet series of internet accessible yum repos to deploy product some people insist on a standalone installation method. I can&#8217;t deny, this is aggravating as snot. Alas, my problem is simple:</p>

<ol>
<li><em>How can I get a yum repo deliverable by media?</em></li>
<li><em>How can I keep the install procedure as similar to those using the publicly available yum repos?</em></li>
</ol>


<p>How to solve this issue using FPM and some cool features of yum:</p>

<!--more-->


<ul>
<li>I&#8217;m assuming you have an accessible yum repository setup the way you want.</li>
<li>Install the yum download only plugin and/or yum-utils</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install yum-downloadonly
</span><span class='line'>yum install yum-utils.noarch</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now you can access your yum repository but with a twist, you can simply download your package and all the dependencies.  Examples:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install &lt;package> --download 
</span><span class='line'>yumdownloader &lt;package> --resolve</span></code></pre></td></tr></table></div></figure>


<ul>
<li>At this point you have all your rpms, move them to a sensible directory structure. I suggest one that matches how you have your public yum repos setup.  Try /data/repo/app/</li>
<li>Once your rpms are in /data/repo/app run createrepo on that directory.  At this point you&#8217;ve got a yum repo on disk.  Now it&#8217;s time to create the repolist file, call it standalone-app.repo</li>
<li>Repolist file:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[name-of-repo]
</span><span class='line'>name=Descriptive Name for your Repo
</span><span class='line'>baseurl=file:///data/repo/app
</span><span class='line'>enabled=0
</span><span class='line'>gpgcheck=0</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll note that this is not enabled by default.  Keep that in mind.<br/>
* Move your repolist to /etc/yum.repos.d/ so that yum picks it up.  You&#8217;re ready to package this beast up.<br/>
* Make sure FPM is installed, gem install fpm<br/>
* FPM chant to package your repo into a rpm for distribution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fpm -s dir -t rpm -n "NameOfPackage" -v &lt;version number> /data/repo/app /etc/yum.repos.d/standalone-app.repo</span></code></pre></td></tr></table></div></figure>


<p>Let that chew for a bit, when it&#8217;s done you&#8217;ll have an rpm.  Move that rpm to another machine and install it.  <br/>
* Magic time.  That RPM you just made and installed has moved your repolist file to the /etc/yum.repo.d dir and put all your packages and yum repo files at /data/repo/app.  Try performing a yum install from this local repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install app --enablerepo name-of-repo</span></code></pre></td></tr></table></div></figure>


<p>Boom. That just happened.  This is a pretty basic usage of FPM but let&#8217;s review what happened:<br/>
1. -s dir: you&#8217;re building an package based on directories and files<br/>
2. -t rpm: the result will be an rpm<br/>
3. -n &#8220;name&#8221;: give your package a name<br/>
4. -v version: give your package a version number<br/>
5. paths to directories and files, separated by spaces</p>

<p>Note how you didn&#8217;t have to wrap your mind around specfiles or any rpm specific stuff.  I can&#8217;t tell you how huge this is. If you don&#8217;t need to care about the inner workings of rpm specfiles, don&#8217;t, FPM takes care of it.  As I said, this is basic stuff. FPM has the ability to rip multiple package formats including apt, deb and many more. It&#8217;s a huge timesaver and worth taking a look at. Buy @jordansissel a beer if you see him.</p>

<p>Did I solve my problem? Yes<br/>
1. I can put this resultant RPM on a usb key or DVD if desired.<br/>
2. The install method is extremely close to the public yum repos with the exception of the &#8211;enablerepo flag.</p>

<p>/#winning</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zendesk]]></title>
    <link href="http://rwoolley.github.com/blog/2012/03/05/zendesk/"/>
    <updated>2012-03-05T20:19:00-07:00</updated>
    <id>http://rwoolley.github.com/blog/2012/03/05/zendesk</id>
    <content type="html"><![CDATA[<p><img src="http://a.yfrog.com/img612/170/bnjk.png" alt="zendesk Logo" /></p>

<p>We use <a href="http://zendesk.com">zendesk</a> and I will admit, I&#8217;m a huge fan.  We had the opportunity to retool our support system and a subtle suggestion from @ericchernuka led us to check out zendesk and what they were cooking.  Of course, if I&#8217;m going to rave about something I&#8217;m going to tell you why, in depth, because that&#8217;s what I do!  So, read on if you want to know about my favorite bits of zendesk in detail.  As a preview my love for zendesk is in part due to: SaaS, iOS/Android app, triggers, macros and integration!</p>

<!-- more -->


<h3>SaaS</h3>

<p>zendesk is clearly SaaS. You&#8217;re thinking yay, big deal… but it is.  We&#8217;re still operating lean and the ability to ramp up or down on the support side of the business is huge to me.  Add in the fact that we went from nothing to a full on support system in weeks is very nice as well.  zendesk has a huge strength in that it is designed for support and support only.  The workflow is clean and tight and you can move through supporting a client with product issues quickly.  If you tie in your support KB you&#8217;re even further ahead because you can extend the service you offer and invite your clients into trackable forums.  A broad set of metrics can be used to constantly allow you to refine the support experience and content delivery.</p>

<h3>Mobile Apps</h3>

<p>This is really nice to have.  Support is like shit, it just happens.  It&#8217;s nice to have apps that keep me connected to the helpdesk and even interact with the issues as they come it. The convenience is stellar.</p>

<h3>Triggers and Avoiding SLA Dread</h3>

<p>We&#8217;re subject to some nasty audits.  Our SLAs are held with a revere that can only be called biblical.  We used to stress about making sure SLAs were met a great deal.  Then we automated those damn things and finally got some sleep.  To accomplish this, we used the trigger functionality and we can tailor the SLAs for each organization and ensure we&#8217;re nagging or getting nagged when the clock starts running out.  Some DevOps mottos extend even to support: automate nearly everything.</p>

<h3>Macros</h3>

<p>It is inevitable in the world of support: you will have to repeat yourself.  Luckily the zendesk designers recognized this and built the concept of a macro.  If you have a repeatable siutation on your hands you can simply build a macro and pa-POW apply that thing to issues that come in.  The joy? you can address issues even faster.</p>

<h3>Integration</h3>

<p>You can integrate EVERYTHING into zendesk.  Right now our integration buffet goes like this:</p>

<ul>
<li>GoodData</li>
<li>Jira</li>
<li>SalesForce</li>
<li>gmail</li>
</ul>


<p>I think that&#8217;s it but hey, we&#8217;re small.  We get stellar metrics from gooddata and use it as our support reporting dashboard.  zendesk issues are escalated to L3 through JIRA tapping into our engineering process with little impact.  Salesforce allows us to push data into the Salesteam without Ops munging in salesforce itself.  Lastly, it&#8217;s all email controlable for the people that don&#8217;t want to leave the comfort of their inbox.</p>

<h3>One more thing</h3>

<p>If you&#8217;re looking at a support tool, seriously consider this option.  @mikecousins has even rolled it into his shuttr project and he&#8217;s a very discerning customer.  I love the efficiency, the reporting and the interface.  Support is still a tax but this makes it fun and fast.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graylog2 and Dreamy Ocelots]]></title>
    <link href="http://rwoolley.github.com/blog/2012/02/05/graylog2-and-dreamy-ocelots/"/>
    <updated>2012-02-05T17:00:00-07:00</updated>
    <id>http://rwoolley.github.com/blog/2012/02/05/graylog2-and-dreamy-ocelots</id>
    <content type="html"><![CDATA[<p>Logging! A repeat topic here these days. I have found myself in a position
where there are multiple instances of our product running and logging the snot
out of everything.  Point of interest: we cannot virtualize our product at this
point due do an OpenGL dependency and the need for some serious GPU power. So,
back to the main topic, how do you deal with logs all over the place? Logstash
and Graylog2 (though @lusis is doing some crazy stuff with logstash and 0mq)
are your best bet. For our testing we did a graylog2 implementatation on Ubuntu
\11.10 and logstash running on RHEL 5.5 piping the logs to our graylog2
instance.  I want to cover our setup (there are some learnings that are worth
noting as most people are ripping Ubuntu 11.04) and I am leaning towards
setting up a chef cookbook soon.</p>

<!-- more -->


<h2>Graylog2 Server</h2>

<ol>
<li>Setup MongoDB
So the mongo in the Ubuntu Repo is not the new hawtness. You&#8217;re best off to
follow these steps to and get the <a href="http://www.mongodb.org/display/DOCS/Ubuntu+and+Debian+packages">latest</a></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10
</span><span class='line'>sudo echo -e "deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen\n" >> /etc/apt/sources.list
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install mongodb-10gen</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Install the recommended JRE</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install openjdk-6-jre</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Grab and Install the Graylog2 Server (0.9.6)</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/graylog2
</span><span class='line'>sudo wget https://github.com/downloads/Graylog2/graylog2-server/graylog2-server-0.9.6.tar.gz
</span><span class='line'>sudo tar -xvf graylog2-server-0.9.6.tar.gz
</span><span class='line'>sudo cp /opt/graylog2/graylog2-server-0.9.6/graylog2.conf.example /etc/graylog2.conf</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Add the Graylog2 user to Mongo</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mongo
</span><span class='line'>use graylog2
</span><span class='line'>db.addUser("graylog2","password")
</span><span class='line'>exit</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Edit the Graylog2 config file</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vim /etc/graylog2.conf
</span><span class='line'>
</span><span class='line'># Match These Settings
</span><span class='line'>mongodb_useauth=truemongodb_user=graylog2
</span><span class='line'>mongodb_password=passwordmongodb_host=127.0.0.1
</span><span class='line'>mongodb_database=graylog2 
</span><span class='line'>mongodb_port=27017</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Kickoff the Graylog2 server and see how you did</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ln -s /opt/graylog2/graylog2-server-0.9.6 /opt/graylog2/graylog2-server
</span><span class='line'>sudo ./graylog2ctl start
</span><span class='line'>Check logs</span></code></pre></td></tr></table></div></figure>


<h2>Elastic Search Installation</h2>

<ol>
<li>One Shot Install</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo wget https://github.com/downloads/elasticsearch/elasticsearch/elasticsearch-0.18.7.tar.gz
</span><span class='line'>sudo tar -xvf elasticsearch-0.18.7.tar.gz
</span><span class='line'>sudo elasticserach/bin/elasticearch #manual start</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.elasticsearch.org/guide/reference/setup/installation.html">More Details</a></p>

<h2>Graylog2 WebUI</h2>

<p>A few points here:
* For testing purposes we&#8217;re just running the webui out of rails. I&#8217;m not sure
  I&#8217;d do this in production
* RVM wasn&#8217;t installed. We don&#8217;t do RVM in product environments. Ocelet&#8217;s Ruby
  is good enough to roll into production
* I ran into issues with the date formats in the gemspec files. Just hack them
A few points here:
* For testing purposes we&#8217;re just running the webui out of rails. I&#8217;m not sure
  I&#8217;d do this in production
* RVM wasn&#8217;t installed. We don&#8217;t do RVM in product environments. Ocelet&#8217;s Ruby
  is good enough to roll into production
* I ran into issues with the date formats in the gemspec files. Just hack them</p>

<ol>
<li>Install Ruby
Ocelot comes with 1.8.7 standard so there is nothing to do here.  RVM is
definitely an option if you want.</li>
<li>Get the Graylog2 WebUI and ramp up rails</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/graylog2/
</span><span class='line'>sudo wget https://github.com/downloads/Graylog2/graylog2-web-interface/graylog2-web-interface-0.9.6.tar.gz
</span><span class='line'>sudo tar -xvf graylog2-web-interface-0.9.6.tar.gz
</span><span class='line'>sudo ln -sf graylog2-web-interface-0.9.6 graylog2-web-interface
</span><span class='line'>sudo apt-get install rubygems
</span><span class='line'>sudo gem install bundler
</span><span class='line'>sudo bundle install
</span><span class='line'>sudo apt-get install rails</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Config and Launch</li>
<li>Edit the mongoid.yml to match your config. I suggest commenting out the test
and development sections.</li>
<li>Launch the WebUI from the cmdline:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/graylog2/graylog2-web-interface/scripts/rails server -e production</span></code></pre></td></tr></table></div></figure>


<h2>Annnnd you&#8217;re done</h2>

<p>At this point you should be read to rip logstash and start pumping all the logs
into the server.  In a later post I will announce a sweet cookbook for this AND
how to setup your logstash on the app server.  Also, I&#8217;m assessing how graylog2
can assist in compliance situations (HIPAA, SOX, ISO, etc) so stay tuned for my
thoughts and findings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging as a Service]]></title>
    <link href="http://rwoolley.github.com/blog/2012/02/01/logging-as-a-service/"/>
    <updated>2012-02-01T20:23:00-07:00</updated>
    <id>http://rwoolley.github.com/blog/2012/02/01/logging-as-a-service</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been running into a logging challenge at work of late.  The usual issue.
Lots of logs, in lots of places, retention policies, governance issues,
reporting and (in my humble opinion the most important) support/debugging.  After some searching I
found logg.ly and Papertrail which offered what I wanted as a service.  Very
sweet.  Unfortunately I cannot use them in this implementation so I am pursuing
Graylog2 and logstash (another blogpost on that later). Right now I&#8217;m plugging
Papertrail into our demo system to see how it goes and how it fits with our
workflow.  I just wanted to cover off some first impressions with Papertrail.</p>

<!--more-->


<ol>
<li><p>Compatability
We&#8217;re running RHEL 5.5 (don&#8217;t judge) so we&#8217;re using syslog. Luckily there is a
little gem from the Papertrail folks that allows you to pipe your app logs into
their service.  remote_syslog works very well!
Ruby 1.8.7 is our ruby of choice for production systems.  We don&#8217;t put RVM on
production boxes so our setup is simple in that regard.</p></li>
<li><p>Ease of Use
I love how I can see a window into all the events flying by. This sounds
ridiculous but I can see issues just by watching patterns in the logs. It&#8217;s
like using the force but it works for me.  Of course you can adjust the
granularity to a specific system.  Search is the next best thing.  90% of my
time spent grovelling in app logs is due to an issue.  Papertrail allows you to
quickly match the user-time-wtf was going on tuple.  Better yet, you can save
any search and run it later. Helpful when you want to see if a fix worked.</p></li>
</ol>


<p>First impressions are great at this point. I think Papertrail has legs.  The
next phase of my thoughts will be around retention and compliance with acts
like HIPAA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postfix]]></title>
    <link href="http://rwoolley.github.com/blog/2012/01/23/postfix/"/>
    <updated>2012-01-23T20:33:00-07:00</updated>
    <id>http://rwoolley.github.com/blog/2012/01/23/postfix</id>
    <content type="html"><![CDATA[<p>Recently the team was working on some stuff in EC2. This is a bit new for us so
we&#8217;re figuring many things out as we go.  One thing work sharing is integrating
a PHP web app running in EC2 to Amazon&#8217;s Simple Email Service.  Following the
guides gets you 90% of the way but the last mile had a snag.  Full disclosure,
none of us is email experts.</p>

<p>We implemented the PHP - Postfix - Stunnel - SES approach advocated by AWS.
The older option used <a href="http://docs.amazonwebservices.com/ses/latest/DeveloperGuide/Scripts.MTAs.Postfix.html">perl</a> and worked for us.  However, we did want to go after the best practice approach and it&#8217;s outlined with the <a href="http://docs.amazonwebservices.com/ses/latest/DeveloperGuide/SMTP.MTAs.Postfix.html">postfix setup</a> and the <a href="http://docs.amazonwebservices.com/ses/latest/DeveloperGuide/SMTP.MTAs.SecureTunnel.html">stunnel</a> setup.</p>

<p>The snag we hit was as follows: using the perl tools we could queue an email in
SES.  Note, when in sandbox mode you can only send to and from the verified
email addresses.  Do yourself a solid and setup two addresses.  Otherwise
reading the mail.log file will blow your mind.  When we tried to queue an email
from our PHP app through postfix across the stunnel to SES the to and from
fields were, in a word, effed up.  Turns out setting the MyDestination
parameter in the main.cf file of the postfix config was the culprit.  Also, in
our PHP.ini file we ensure that we were starting sendmail with the suggested
unix flags but that&#8217;s a red herring for this issue.  Our solution was to unset
the MyDestination parm and pow.  Up and running.  We think.  Here&#8217;s to a great
push by @ericchernuka, @dannydotellis, and @swinglinetrade to solve a stinker.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://rwoolley.github.com/blog/2012/01/18/hello-octopress/"/>
    <updated>2012-01-18T19:57:00-07:00</updated>
    <id>http://rwoolley.github.com/blog/2012/01/18/hello-octopress</id>
    <content type="html"><![CDATA[<p>So I&#8217;ve switched to Octopress.  I am quite impressed with it and markdown.
Elegantly simple.  This might even encourage me blog more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOps - Where to start]]></title>
    <link href="http://rwoolley.github.com/blog/2011/12/16/devops-where-to-start/"/>
    <updated>2011-12-16T23:29:00-07:00</updated>
    <id>http://rwoolley.github.com/blog/2011/12/16/devops-where-to-start</id>
    <content type="html"><![CDATA[<p><em>post rescued from my wordpress blog</em></p>

<p>A little over a year ago one of the Systems Engineers on my team (@rhettdickson) suggested I look into DevOps and maybe start adopting some of the practices.  What a prophetic suggestion.  Presently the Ops team at Calgary Scientific is in the midst of implementing many great DevOps ideas and practices.  I wanted to share some of the key things I have learned about getting started with DevOps.  This post is heavy on the links, twitter, blogs and opinions but I hope you find it interesting.</p>

<!--more-->


<p>What is DevOps?
Well, that’s a loaded question.  I’ll start with what it’s not.  First, it’s not a team or a role.  If you have a DevOps team or a dedicated DevOps role I think you’re doing it wrong.  Secondly, it’s not a cult it’s a community.  An amazing, open, and strong community.  Just trawl through github and you’ll see hundreds of little projects aimed at getting things done and out the door as easily as possible.  The best part, no one hoards their knowledge or experience; they are all willing to share.</p>

<p>So What is it?
It’s a revolution to change the way we deploy solutions, manage the configuration of those deployments, leverage the cloud and perhaps best of all bridge the gap between the developer world and the operations world.  How do you get to there?  Well, here’s how I started.</p>

<p>Twitter: Follow these people.
Twitter is very active for DevOps, just watch the #devops topic and you’ll see.  There are many great tidbits that fly by during a day. This is the bare minimum list of people to follow on twitter.  Start here and add as you see fit.</p>

<p>John E. Vincent: @lusis
John is a DevOps badass.  He’s full of great ideas, sweet contributions to github and whenever I hit a snag chances are he’s already hit it, posted a blog entry about it, coded some sweetness and posted it on github.</p>

<p>Chris Hartjes: @chartjes
Chris is the great communicator of DevOps. Read his blog archives. I did and it’s been helping me win the battle within my organization to sell the concept of DevOps and its adoption. And he’s hilarious.</p>

<p>Julian Simpson: @BuildDoctor
Julian is the Doc Holliday of DevOps.  Got a continuous integration system in place and think it’s rock solid? Better be sure cuz he’s your huckleberry.  He’ll unplug it and make you prove the robustness.  Then show you where you went wrong and how to fix it.</p>

<p>Gareth Rushgrove: @garethr
Gareth is like Batman. Mild mannered gentleman by day  but prowling the rooftops looking for crappy build systems, lame deployment practices and beating it out of you by night.  This is mostly supposition but you’ll share my sentiments after following him.</p>

<p>Websites:
The proof is in the pudding.  If DevOps wasn’t a real thing then there wouldn’t be companies building tools and platforms for it.  There wouldn’t be meet ups, conferences or DevOps Days.  But there are all these things.  Here’s some useful links and blogs. Put these into Reeder, Early Edition, Google Reader or something equally useful.  RSS is old but still awesome.</p>

<p><a href="http://www.opscode.com/">OpsCode</a>
<a href="http://puppetlabs.com/">Puppet</a>
<a href="https://github.com/">GitHub</a>
<a href="http://www.build-doctor.com/">BuildDr</a>
<a href="http://morethanseven.net/">morethanseven</a>
<a href="http://blog.lusis.org/">Lusis</a>
<a href="http://www.littlehart.net/atthekeyboard/">Hartjes</a></p>

<p>One More Thing &#8230;
Remember how I said Gareth Rushgrove was like Batman?  Here’s another reason why: he has his own digital Batcave for all things DevOps.  Every week he compiles a wonderful email with all the neatest stuff in the world of DevOps and sends it out.  This is the most important thing you can do: sign up for his email.  <a href="http://devopsweekly.com/">devopsWeekly</a></p>

<p>There’s also an archive.  It’s the most accurate chronicle of the DevOps movement and laden with incredible information.  I wrote a script that pulled all the links out of the archive and pushed them to instapaper.  Then I read them all non-stop.</p>

<p>So, this would be how I started learning.  Maybe this will help you too.</p>
]]></content>
  </entry>
  
</feed>
